client_1:
  model:
    out_channels: 2
    task: graphClassification
  criterion:
    type: CrossEntropyLoss
  train:
    local_update_steps: 30
    optimizer:
      lr: 0.01
  eval:
    metrics: ['acc','imp_ratio']
    base: 0.263789
  data:
    batch_size: 128
client_2:
  model:
    out_channels: 2
    task: graphClassification
  criterion:
    type: CrossEntropyLoss
  train:
    local_update_steps: 20
    optimizer:
      lr: 0.01
  eval:
    metrics: ['acc','imp_ratio']
    base: 0.289617
  data:
    batch_size: 8
client_3:
  model:
    out_channels: 2
    task: graphClassification
  criterion:
    type: CrossEntropyLoss
  train:
    local_update_steps: 20
    optimizer:
      lr: 0.001
  eval:
    metrics: ['acc','imp_ratio']
    base: 0.355404
  data:
    batch_size: 128
client_4:
  model:
    out_channels: 2
    task: graphClassification
  criterion:
    type: CrossEntropyLoss
  train:
    local_update_steps: 20
    optimizer:
      lr: 0.01
  eval:
    metrics: ['acc','imp_ratio']
    base: 0.176471
  data:
    batch_size: 8
client_5:
  model:
    out_channels: 2
    task: graphClassification
  criterion:
    type: CrossEntropyLoss
  train:
    local_update_steps: 20
    optimizer:
      lr: 0.0001
  eval:
    metrics: ['acc','imp_ratio']
    base: 0.396825
  data:
    batch_size: 8
client_6:
  model:
    out_channels: 2
    task: graphClassification
  criterion:
    type: CrossEntropyLoss
  train:
    local_update_steps: 20
    optimizer:
      lr: 0.01
  eval:
    metrics: ['acc','imp_ratio']
    base: 0.261580
  data:
    batch_size: 128
client_7:
  model:
    out_channels: 2
    task: graphClassification
  criterion:
    type: CrossEntropyLoss
  train:
    local_update_steps: 30
    optimizer:
      lr: 0.01
  eval:
    metrics: ['acc','imp_ratio']
    base: 0.302378
  data:
    batch_size: 128
client_8:
  model:
    out_channels: 2
    task: graphClassification
  criterion:
    type: CrossEntropyLoss
  train:
    local_update_steps: 20
    optimizer:
      lr: 0.005
  eval:
    metrics: ['acc','imp_ratio']
    base: 0.211538
  data:
    batch_size: 32
client_9:
  model:
    out_channels: 1
    task: graphRegression
  criterion:
    type: MSELoss
  train:
    local_update_steps: 5
    optimizer:
      lr: 0.1
      momentum: 0.
  eval:
    metrics: ['mse','imp_ratio']
    base: 0.059199
  data:
    target_transform: [['Normalize',
              {'mean': [1.5360],
               'std': [0.3795],
              }
             ]]
    batch_size: 256
client_10:
  model:
    out_channels: 10
    task: graphRegression
  criterion:
    type: MSELoss
  train:
    local_update_steps: 5
    optimizer:
      lr: 0.05
  # grad:
  #   grad_clip: 1.0
  eval:
    metrics: ['mse','imp_ratio']
    base: 0.007083
  data:
    target_transform: [['Normalize',
              {'mean': [0.2141, 0.3929, 0.4392, 0.2141, 0.2141, 0.2141, 0.3723, 0.7067, 0.5434,0.3379],
               'std': [0.1308, 0.1011, 0.1208, 0.1308, 0.1308, 0.1308, 0.1069, 0.1372, 0.1423,0.1044],
              }
             ]]
    batch_size: 256
client_11:
  model:
    out_channels: 1
    task: graphRegression
  criterion:
    type: MSELoss
  train:
    local_update_steps: 20
    optimizer:
      lr: 0.01
  eval:
    metrics: ['mse','imp_ratio']
    base: 0.734011
  data:
    target_transform: [['Normalize',
              {'mean': [2.1724],
               'std': [1.2130],
              }
             ]]
    batch_size: 256
client_12:
  model:
    out_channels: 1
    task: graphRegression
  criterion:
    type: MSELoss
  train:
    local_update_steps: 20
    optimizer:
      lr: 0.01
      momentum: 0.
  eval:
    metrics: ['mse','imp_ratio']
    base: 1.361326
  data:
    batch_size: 16
    target_transform: [['Normalize',
              {'mean': [-3.0899],
               'std': [2.0798],
              }
             ]]
client_13:
  model:
    out_channels: 12
    task: graphRegression
  criterion:
    type: MSELoss
  train:
    local_update_steps: 5
    optimizer:
      lr: 0.005
  # grad:
  #   grad_clip: 1.0
  eval:
    metrics: ['mse','imp_ratio']
    base: 0.004389
  data:
    target_transform: [['Normalize',
              {'mean': [0.3598, 0.8599, 0.3426, 0.5239, 0.3604, 0.4220, 0.3570, 0.5764, 0.5009, 0.4641, 0.4350, 0.6251],
               'std': [0.0984, 0.0486, 0.0791, 0.1228, 0.0986, 0.0604, 0.0978, 0.0658, 0.1274, 0.1188, 0.1138, 0.0993],
              }
             ]]
    batch_size: 256